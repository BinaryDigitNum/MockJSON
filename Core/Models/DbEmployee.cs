// Generated by https://quicktype.io
namespace QuickType
{
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class DbEmployee
    {
        [JsonProperty("employee_id")]
        public string? EmployeeId { get; set; }

        [JsonProperty("first_name")]
        public string? FirstName { get; set; }

        [JsonProperty("last_name")]
        public string? LastName { get; set; }

        [JsonProperty("email")]
        public string? Email { get; set; }

        [JsonProperty("gender")]
        public string? Gender { get; set; }

        [JsonProperty("college")]
        public string? College { get; set; }

        [JsonProperty("job")]
        public Job? Job { get; set; }

        [JsonProperty("previous_jobs")]
        public PreviousJob[]? PreviousJobs { get; set; }

        [JsonProperty("phonenumber")]
        public string? PhoneNumber { get; set; }
    }

    public partial class Job
    {
        [JsonProperty("title")]
        public string? Title { get; set; }

        [JsonProperty("department")]
        public string? Department { get; set; }

        [JsonProperty("company")]
        public string? Company { get; set; }
    }

    public partial class PreviousJob
    {
        [JsonProperty("title")]
        public string? Title { get; set; }

        [JsonProperty("company")]
        public string? Company { get; set; }
    }

    public partial class DbEmployee
    {
        public static DbEmployee? FromJson(string json) => JsonConvert.DeserializeObject<DbEmployee>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this DbEmployee self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
